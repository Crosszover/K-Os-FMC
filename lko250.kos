if ag1 = "True" { toggle ag1. }.
if ag2 = "True" { toggle ag2. }.
if ag3 = "True" { toggle ag3. }.
if ag4 = "True" { toggle ag4. }.
if ag5 = "True" { toggle ag5. }.

CLEARSCREEN.
PRINT "250 KM TARGET ORBIT".
PRINT "==================================".
PRINT "PRESS - [AG1] TO START COUNT-DOWN".
PRINT " ".
PRINT " ".
PRINT " ".
PRINT " ".
PRINT " ".
PRINT " ".
PRINT "[AG5] <- BACK".
PRINT "==================================".

wait until ag1 = "TRUE".
CLEARSCREEN.
lock steering to heading(90,90).
lock throttle to 1.
PRINT "9".
WAIT 1.
PRINT "8".
WAIT 1.
PRINT "7".
WAIT 1.
PRINT "6".
WAIT 1.
PRINT "5".
WAIT 1.
PRINT "4".
WAIT 1.
PRINT "3".
WAIT 1.
PRINT "2".
WAIT 1.
PRINT "1".
PRINT "IGNITION".
STAGE.
wait until altitude > 8000.
PRINT "8.000 MTRS GRAVITY TURN".
lock steering to heading(90,80).
wait until altitude > 20000.
PRINT "20.000 MTRS GRAVITY TURN".
lock steering to heading(90,45).
wait until altitude > 30000.
PRINT "30.000 MTRS STAGE RELEASE".
WAIT 2.
STAGE.
wait until altitude > 35000.
PRINT "35.000 MTRS GRAVITY TURN".
lock steering to heading(90,30).
until apoapsis > 250000 {
  print "apoapsis is " + round(apoapsis,0).
  wait 0.
//gufoe/orbit.js code ( https://gist.github.com/gufoe/ffea36be6d05b435927f )
}
lock throttle to 0.
print "Waiting apoapsis".
lock steering to heading(90,0). // Look at east (90), zero degrees above the horizon
wait eta:apoapsis-.1. // Wait to reach apoapsis
lock throttle to 1. // Full power

set oldEcc to orbit:eccentricity.
until (oldEcc < orbit:eccentricity) { // Exists when the eccentricity stop dropping
    set oldEcc to orbit:eccentricity.
    
    set power to 1.
    if (orbit:eccentricity < .1) {
        // Lower the power when eccentricity < 0.1
        set power to max(.02, orbit:eccentricity*10).
    }
    
    // Radius is altitude plus planet radius
    set radius to altitude+orbit:body:radius.
    
    // Gravitational force
    set gForce to constant:G*mass*orbit:body:mass/radius^2.
    
    // Centripetal force
    set cForce to mass*ship:velocity:orbit:mag^2/radius.
    
    // Set total force
    set totalForce to gForce - cForce.
    
    // Current stage ended?
    until (maxThrust > 0) {
        stage.
    }
    set thrust to power*maxThrust.
    
    // Check if the thrust is enough to keep the v. speed at ~0m/s
    if (thrust^2-totalForce^2 < 0) {
        print "The vessel hasn't enough thrust to reach a circular orbit.".
        break.
    }
    
    // The angle above the horizon is the angle 
    set angle to arctan(totalForce/sqrt(thrust^2-totalForce^2)).
    
    // Adjust new values for throttle and steering
    lock throttle to power.
    lock steering to heading(90,angle).
    
    // Print stats
    clearscreen.
    print "Attraction:  "+gForce.
    print "Centripetal: "+cForce.
    
    // Wait one tenth of a second
    wait .1.
}

// Shut down engines
lock throttle to 0.
print "Orbit reached, eccentricity: "+orbit:eccentricity.

PRINT "FAIRIND DEPLOY IN 5".
WAIT 1.
PRINT "FAIRIND DEPLOY IN 4".
WAIT 1.
PRINT "FAIRIND DEPLOY IN 3".
WAIT 1.
PRINT "FAIRIND DEPLOY IN 2".
WAIT 1.
PRINT "FAIRIND DEPLOY IN 1".
WAIT 1.
PRINT "FAIRIND DEPLOY IN 0".
WAIT 1.
toggle ag7.
WAIT 5.
PRINT "SOLAR ARRAY DEPLOY IN 3".
WAIT 1.
PRINT "SOLAR ARRAY DEPLOY IN 2".
WAIT 1.
PRINT "SOLAR ARRAY DEPLOY IN 1".
WAIT 1.
PRINT "SOLAR ARRAY DEPLOY IN 0".
toggle ag8.
.
if ag1 = "True" { toggle ag1. }.
if ag2 = "True" { toggle ag2. }.
if ag3 = "True" { toggle ag3. }.
if ag4 = "True" { toggle ag4. }.
if ag5 = "True" { toggle ag5. }.

CLEARSCREEN.
PRINT "250 KM TARGET ORBIT".
PRINT "==================================".
PRINT "250KM ORBIT ACHIEVED".
PRINT " ".
PRINT " ".
PRINT " ".
PRINT " ".
PRINT " ".
PRINT " ".
PRINT "[AG5] <- BACK".
PRINT "==================================".
UNLOCK STEERING.
UNLOCK THROTTLE.
wait until ag5 = "TRUE".
RUN fmc_lko_menu.kos.